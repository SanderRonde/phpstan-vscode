{
	"name": "phpstan-vscode",
	"displayName": "phpstan",
	"description": "PHPStan language server and inline error provider",
	"version": "3.0.4",
	"engines": {
		"vscode": "^1.64.0",
		"node": ">=14.16.0"
	},
	"license": "MIT",
	"categories": [
		"Linters"
	],
	"icon": "static/images/phpstan.png",
	"repository": {
		"type": "git",
		"url": "https://github.com/SanderRonde/phpstan-vscode"
	},
	"homepage": "https://github.com/SanderRonde/phpstan-vscode/blob/main/README.md",
	"bugs": {
		"url": "https://github.com/SanderRonde/phpstan-vscode/issues",
		"email": "awsdfgvhbjn@gmail.com"
	},
	"publisher": "SanderRonde",
	"activationEvents": [
		"onLanguage:php"
	],
	"main": "./out/extension.js",
	"contributes": {
		"configuration": {
			"type": "object",
			"title": "PHPStan",
			"properties": {
				"phpstan.binPath": {
					"type": "string",
					"default": "vendor/bin/phpstan",
					"description": "Path to the PHPStan binary"
				},
				"phpstan.binCommand": {
					"type": "array",
					"examples": [
						[
							"phpstan"
						],
						[
							"lando",
							"phpstan"
						]
					],
					"items": {
						"type": "string"
					},
					"description": "PHPStan command. Use this instead of \"binPath\" if, for example, the phpstan binary is in your path"
				},
				"phpstan.configFile": {
					"type": "string",
					"default": "phpstan.neon,phpstan.neon.dist,phpstan.dist.neon",
					"examples": [
						"phpstan.neon",
						"backend/phpstan.neon",
						"phpstan.neon,phpstan.neon.dist"
					],
					"description": "Path to the config file (use a comma-separated list to resolve in order)"
				},
				"phpstan.paths": {
					"type": "object",
					"default": {},
					"examples": [
						{
							"/path/to/hostFolder": "/path/in/dockerContainer"
						}
					],
					"description": "Path mapping for scanned files. Allows for rewriting paths for for example SSH or Docker."
				},
				"phpstan.rootDir": {
					"type": "string",
					"description": "Path to the root directory"
				},
				"phpstan.options": {
					"type": "array",
					"default": [],
					"items": {
						"type": "string"
					},
					"description": "Extra commandline options to be passed to PHPStan. Supports substituting ${workspaceFolder}"
				},
				"phpstan.enableStatusBar": {
					"type": "boolean",
					"default": true,
					"description": "Show the status bar while scanning"
				},
				"phpstan.memoryLimit": {
					"type": "string",
					"default": "1G",
					"description": "Memory limit to use"
				},
				"phpstan.enabled": {
					"type": "boolean",
					"description": "Whether to enable the on-save checker",
					"default": true
				},
				"phpstan.projectTimeout": {
					"type": "number",
					"description": "Timeout in milliseconds for a full project check. After this time the checking process is canceled",
					"default": 300000
				},
				"phpstan.suppressTimeoutMessage": {
					"type": "boolean",
					"description": "Stop showing an error when the operation times out",
					"default": false
				},
				"phpstan.showProgress": {
					"type": "boolean",
					"description": "Show the progress bar when performing a single-file check",
					"default": false
				},
				"phpstan.enableLanguageServer": {
					"type": "boolean",
					"description": "Enable language server that provides on-hover type information. Disable this if you have a custom PHPStan binary that runs on another filesystem (such as Docker) or if you run into caching problems. Does not work with PHPStan Pro enabled or for PHPStan version < 1.8.0.",
					"default": false
				},
				"phpstan.ignoreErrors": {
					"type": "array",
					"description": "An array of regular expressions to ignore in PHPStan's error output. If PHPStan outputs some warnings/errors in stderr that can be ignored, put them in here and they'll no longer cause the process to exit with an error.",
					"default": [],
					"items": {
						"type": "string"
					},
					"examples": [
						[
							"Xdebug: .*"
						]
					]
				},
				"phpstan.suppressWorkspaceMessage": {
					"type": "boolean",
					"description": "Stop showing an error when using a multi-workspace project",
					"default": false
				},
				"phpstan.pro": {
					"type": "boolean",
					"description": "Use PHPStan Pro under the hood (if you have a license)",
					"default": false
				},
				"phpstan.proTmpDir": {
					"type": "string",
					"description": "Path to the PHPStan Pro TMP directory. Defaults to PHPStan's default (which is /tmp/phpstan-fixer)"
				},
				"phpstan.checkValidity": {
					"type": "boolean",
					"description": "Check the validity of the PHP code before checking it with PHPStan. This is recommended only if you have autoSave enabled or for some other reason save syntactically invalid code. PHPStan tends to invalidate its cache when checking an invalid file, leading to a slower experience.",
					"default": false
				}
			}
		},
		"commands": [
			{
				"command": "phpstan.scanProjectForErrors",
				"title": "Scan project for errors"
			},
			{
				"command": "phpstan.reload",
				"title": "Reload language server"
			},
			{
				"command": "phpstan.nextError",
				"title": "Go to next error"
			},
			{
				"command": "phpstan.previousError",
				"title": "Go to previous error"
			},
			{
				"command": "phpstan.openPhpstanPro",
				"title": "Open PHPStan Pro in browser"
			},
			{
				"command": "cmd.phpstan.scanProjectForErrors",
				"title": "PHPStan: Scan project for errors"
			},
			{
				"command": "cmd.phpstan.reload",
				"title": "PHPStan: Reload language server"
			},
			{
				"command": "cmd.phpstan.nextError",
				"title": "PHPStan: Go to next error"
			},
			{
				"command": "cmd.phpstan.previousError",
				"title": "PHPStan: Go to previous error"
			},
			{
				"command": "cmd.phpstan.openPhpstanPro",
				"title": "PHPStan: Open PHPStan Pro in browser"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "phpstan.scanProjectForErrors",
					"when": "false"
				},
				{
					"command": "phpstan.reload",
					"when": "false"
				},
				{
					"command": "phpstan.nextError",
					"when": "false"
				},
				{
					"command": "phpstan.previousError",
					"when": "false"
				},
				{
					"command": "phpstan.openPhpstanPro",
					"when": "false"
				},
				{
					"command": "cmd.phpstan.scanProjectForErrors",
					"when": "true"
				},
				{
					"command": "cmd.phpstan.reload",
					"when": "true"
				},
				{
					"command": "cmd.phpstan.nextError",
					"when": "true"
				},
				{
					"command": "cmd.phpstan.previousError",
					"when": "true"
				},
				{
					"command": "cmd.phpstan.openPhpstanPro",
					"when": "true"
				}
			]
		},
		"keybindings": []
	},
	"watch": {
		"build-debug": {
			"patterns": [
				"client",
				"server"
			],
			"extensions": "ts"
		}
	},
	"scripts": {
		"prepack": "bun run generate-package && bun run prettier --check client server && bun run lint && bun run compile && bun run build",
		"vscode:prepublish": "bun run prepack",
		"compile": "tsc",
		"watch": "tsc --watch",
		"build": "rimraf ./out && (bun run build:$VARIANT || bun run build:main)",
		"build:": "bun run build:main",
		"build:debug": "bun run build-debug:main",
		"build:main": "bun run --cwd server build && bun run --cwd client build",
		"build-debug": "rimraf ./out && bun run build-debug:main",
		"build-debug:main": "bun run --cwd server build-debug && bun run --cwd client build-debug",
		"build-debug:attach-server": "rimraf ./out && bun run --cwd server build-debug:attac-server && bun run --cwd client build-debug",
		"lint": "eslint client server --ext ts",
		"format-staged": "(git diff --ignore-submodules --quiet && bun run format) || pretty-quick client server",
		"format": "prettier --write client server",
		"package": "bun run vsce package",
		"package-dev": "VARIANT=\"debug\" bun run vsce package",
		"generate-package": "generate-package-json generate --input shared/commands/defs.ts -w -p package.json --handler client/src/lib/commands.ts --validate --name PHPStan --prefix PHPStan && prettier --write package.json",
		"prepush": "bun run generate-package && bun run format-staged && bun run lint --fix && bun run compile",
		"devBun": "bun install && bun install --cwd client && bun install --cwd server",
		"postinstall": "bun run --cwd client && bun run --cwd server",
		"dev": "bun run devBun && cd test/demo && composer install && cd ../../php && composer install && cd vendor/phpstan && git clone https://github.com/phpstan/phpstan-src"
	},
	"devDependencies": {
		"@types/glob": "^7.2.0",
		"@types/mocha": "^9.1.0",
		"@types/node": "^17.0.18",
		"@types/rimraf": "^3",
		"@typescript-eslint/eslint-plugin": "^5.12.0",
		"@typescript-eslint/parser": "latest",
		"esbuild": "latest",
		"eslint": "latest",
		"eslint-plugin-node": "^11.1.0",
		"eslint-plugin-prettier": "latest",
		"eslint-plugin-unused-imports": "^2.0.0",
		"gts": "^3.1.0",
		"mocha": "latest",
		"prettier": "latest",
		"prettier-plugin-sort-imports": "^1.5.12",
		"pretty-quick": "^3.1.3",
		"rimraf": "latest",
		"ts-loader": "latest",
		"tsx": "latest",
		"typescript": "latest",
		"vsce": "latest",
		"vscode-generate-package-json": "^1.2.0",
		"vscode-languageclient": "^8.0.1",
		"vscode-test": "^1.6.1"
	},
	"dependencies": {
		"tmp-promise": "^3.0.3"
	}
}